@using SmartSolucionesCuba.SAPRESSC.Core.Common.Models.View;
@using SSC.CustomSolution.CubansConexion.TuneUpResell.WebApplication.Models.View;

@model PaginationViewModel<NautaBalanceTuneUpProfileDisplayViewModel>

@{
    ViewData["Title"] = "Administración de Perfil de Recarga Nauta";

    ViewData[BreadcrumbViewModel.BREADCRUMBS_MAP_KEY] = new List<BreadcrumbViewModel>
{
new BreadcrumbViewModel
{
Caption = "<span class=\"glyphicon glyphicon-home\"></span> Inicio",
Url = "/"
},
new BreadcrumbViewModel
{
Caption = "Administración",
Url = Url.Action("index", "management", new { Area = string.Empty })
},
new BreadcrumbViewModel
{
Caption = "Perfil de Recarga Nauta"
}
};

    Layout = "_BackendLayout";
}

<section id="mainrender">
    <div class="container">
        <h3>@ViewData["Title"]</h3>
        <hr />
        <a class="btn btn-primary pull-right" href="@Url.Action("create")">Nuevo Perfil Nauta</a>

        <div class="clearfix" style="margin-bottom: 20px;"></div>

        @if (Model.MaxPageCount > 0)
        {
            if (Model.HasNext || Model.HasPrevious)
            {
                var paginationStart = (Model.Page - 1) * Model.Limit + 1;
                var paginationEnd = paginationStart - 1 + Model.List.Count;

                <div class="text-center">
                    <ul class="pagination" style="margin: 0;">
                        @if (Model.HasPrevious)
                        {
                            <li><a href="@Url.Action(Model.Action, new Microsoft.AspNetCore.Routing.RouteValueDictionary(Model.RouteValues) {{"sheet", Model.Page - 1}})">&laquo;</a></li>
                        }
                        else
                        {
                            <li class="disabled"><a href="#">&laquo;</a></li>
                        }

                        @if (Model.MaxPageCount > 5)
                        {
                            if (Model.Page > 3)
                            {
                                if (Model.MaxPageCount - Model.Page < 3)
                                {
                                    for (var i = Model.MaxPageCount - 4; i <= Model.MaxPageCount; i++)
                                    {
                                        if (i == Model.Page)
                                        {
                                            <li class="active"><a href="#">@i <span class="sr-only">(current)</span></a></li>
                                        }
                                        else
                                        {
                                            <li><a href="@Url.Action(Model.Action, new Microsoft.AspNetCore.Routing.RouteValueDictionary(Model.RouteValues) {{"sheet", i}})">@i</a></li>
                                        }
                                    }
                                }
                                else
                                {
                                    for (var i = Model.Page - 2; i <= Model.Page + 2; i++)
                                    {
                                        if (i == Model.Page)
                                        {
                                            <li class="active"><a href="#">@i <span class="sr-only">(current)</span></a></li>
                                        }
                                        else
                                        {
                                            <li><a href="@Url.Action(Model.Action, new Microsoft.AspNetCore.Routing.RouteValueDictionary(Model.RouteValues) {{"sheet", i}})">@i</a></li>
                                        }
                                    }
                                }
                            }
                            else
                            {
                                for (var i = 1; i <= 5; i++)
                                {
                                    if (i == Model.Page)
                                    {
                                        <li class="active"><a href="#">@i <span class="sr-only">(current)</span></a></li>
                                    }
                                    else
                                    {
                                        <li><a href="@Url.Action(Model.Action, new Microsoft.AspNetCore.Routing.RouteValueDictionary(Model.RouteValues) {{"sheet", i}})">@i</a></li>
                                    }
                                }
                            }
                        }
                        else
                        {
                            for (var i = 1; i <= Model.MaxPageCount; i++)
                            {
                                if (i == Model.Page)
                                {
                                    <li class="active"><a href="#">@i <span class="sr-only">(current)</span></a></li>
                                }
                                else
                                {
                                    <li><a href="@Url.Action(Model.Action, new Microsoft.AspNetCore.Routing.RouteValueDictionary(Model.RouteValues) {{"sheet", i}})">@i</a></li>
                                }
                            }
                        }

                        @if (Model.HasNext)
                        {
                            <li><a href="@Url.Action(Model.Action, new Microsoft.AspNetCore.Routing.RouteValueDictionary(Model.RouteValues) {{"sheet", Model.Page + 1}})">&raquo;</a></li>
                        }
                        else
                        {
                            <li class="disabled"><a href="#">&raquo;</a></li>
                        }
                    </ul>
                    <div class="text-info" style="margin-top: 10px; margin-bottom: 20px;">
                        <span style="font-weight: 600;">Página @Model.Page</span>: del @paginationStart al @paginationEnd, <span style="font-weight: 600;">Total de páginas</span>: @Model.MaxPageCount
                    </div>
                </div>
            }


            <div class="tabla-container">
                <div class="row tabla-row-header">
                    <div class="col-md-3 tabla-col">
                        <div class="col-texto-header">
                            Perfil
                        </div>
                    </div>
                    <div class="col-md-3 tabla-col">
                        <div class="col-texto-header">
                            Monto
                        </div>
                    </div>
                    <div class="col-md-3 tabla-col">
                        <div class="col-texto-header">
                            Habilitado
                        </div>
                    </div>
                </div>
                @foreach (var item in Model.List)
                {
                    <div class="row tabla-row">
                        <div class="col-md-3 tabla-col">
                            <div class="col-titulo">
                                Cuenta
                            </div>
                            <div class="col-texto">
                                @item.Label
                            </div>
                        </div>
                        <div class="col-md-3 tabla-col">
                            <div class="col-titulo">
                                Saldo
                            </div>
                            <div class="col-texto">
                                @item.Amount
                            </div>
                        </div>
                        <div class="col-md-3 tabla-col">
                            <div class="col-titulo">
                                Habilitada
                            </div>
                            @if (@item.Enabled)
                            {
                                <div class="col-texto">
                                    Si
                                </div>
                            }
                            else
                            {
                                <div class="col-texto">
                                    Si
                                </div>
                            }
                        </div>
                        <div class="col-md-3 tabla-col-btn">
                            <div class="col-btn">
                                <a class="btn btn-success tabla-btn" href="@Url.Action("edit", new { key = item.Id })">Modificar</a>
                                <a class="btn btn-danger tabla-btn" href="@Url.Action("delete", new {key = item.Id})">Eliminar</a>
                            </div>
                        </div>
                    </div>
                }
            </div>

            if (Model.HasNext || Model.HasPrevious)
            {
                var paginationStart = (Model.Page - 1) * Model.Limit + 1;
                var paginationEnd = Model.List.Count;

                <div class="text-center" style="margin-top: 20px;">
                    <div class="text-info" style="margin-bottom: 10px; margin-top: 20px;">
                        <span style="font-weight: 600;">Página @Model.Page</span>: del @paginationStart al @paginationEnd, <span style="font-weight: 600;">Total de páginas</span>: @Model.MaxPageCount
                    </div>
                    <ul class="pagination" style="margin: 0;">
                        @if (Model.HasPrevious)
                        {
                            <li><a href="@Url.Action(Model.Action, new Microsoft.AspNetCore.Routing.RouteValueDictionary(Model.RouteValues) {{"key", Model.Page - 1}})">&laquo;</a></li>
                        }
                        else
                        {
                            <li class="disabled"><a href="#">&laquo;</a></li>
                        }

                        @if (Model.MaxPageCount > 5)
                        {
                            if (Model.Page > 3)
                            {
                                if (Model.MaxPageCount - Model.Page < 3)
                                {
                                    for (var i = Model.MaxPageCount - 4; i <= Model.MaxPageCount; i++)
                                    {
                                        if (i == Model.Page)
                                        {
                                            <li class="active"><a href="#">@i <span class="sr-only">(current)</span></a></li>
                                        }
                                        else
                                        {
                                            <li><a href="@Url.Action(Model.Action, new Microsoft.AspNetCore.Routing.RouteValueDictionary(Model.RouteValues) {{"key", i}})">@i</a></li>
                                        }
                                    }
                                }
                                else
                                {
                                    for (var i = Model.Page - 2; i <= Model.Page + 2; i++)
                                    {
                                        if (i == Model.Page)
                                        {
                                            <li class="active"><a href="#">@i <span class="sr-only">(current)</span></a></li>
                                        }
                                        else
                                        {
                                            <li><a href="@Url.Action(Model.Action, new Microsoft.AspNetCore.Routing.RouteValueDictionary(Model.RouteValues) {{"key", i}})">@i</a></li>
                                        }
                                    }
                                }
                            }
                            else
                            {
                                for (var i = 1; i <= 5; i++)
                                {
                                    if (i == Model.Page)
                                    {
                                        <li class="active"><a href="#">@i <span class="sr-only">(current)</span></a></li>
                                    }
                                    else
                                    {
                                        <li><a href="@Url.Action(Model.Action, new Microsoft.AspNetCore.Routing.RouteValueDictionary(Model.RouteValues) {{"key", i}})">@i</a></li>
                                    }
                                }
                            }
                        }
                        else
                        {
                            for (var i = 1; i <= Model.MaxPageCount; i++)
                            {
                                if (i == Model.Page)
                                {
                                    <li class="active"><a href="#">@i <span class="sr-only">(current)</span></a></li>
                                }
                                else
                                {
                                    <li><a href="@Url.Action(Model.Action, new Microsoft.AspNetCore.Routing.RouteValueDictionary(Model.RouteValues) {{"key", i}})">@i</a></li>
                                }
                            }
                        }

                        @if (Model.HasNext)
                        {
                            <li><a href="@Url.Action(Model.Action, new Microsoft.AspNetCore.Routing.RouteValueDictionary(Model.RouteValues) {{"key", Model.Page + 1}})">&raquo;</a></li>
                        }
                        else
                        {
                            <li class="disabled"><a href="#">&raquo;</a></li>
                        }
                    </ul>
                </div>
            }
        }
        else
        {
            <div style="border: 1px solid #DDD; border-radius: 4px;">
                <table class="table" style="margin: 0;">
                    <thead>
                        <tr>
                            <th>Nombre</th>
                            <th>Monto</th>
                            <th style="width: 184px;">Opciones</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td colspan="3"><p style="margin: 0 5px;" class="text-muted">Sin elementos que mostrar</p></td>
                        </tr>
                    </tbody>
                </table>
            </div>
        }
    </div>
</section>