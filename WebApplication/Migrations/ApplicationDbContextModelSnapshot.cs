// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SSC.CustomSolution.CubansConexion.TuneUpResell.WebApplication.Data;

namespace SSC.CustomSolution.CubansConexion.TuneUpResell.WebApplication.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.1-servicing-10028")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Microsoft.AspNetCore.DataProtection.EntityFrameworkCore.DataProtectionKey", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("FriendlyName")
                        .HasColumnName("friendlyname");

                    b.Property<string>("Xml")
                        .HasColumnName("xml");

                    b.HasKey("Id")
                        .HasName("pk_dataprotectionkeys");

                    b.ToTable("dataprotectionkeys");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnName("concurrencystamp");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnName("normalizedname")
                        .HasMaxLength(256);

                    b.HasKey("Id")
                        .HasName("pk_aspnetroles");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("rolenameindex");

                    b.ToTable("aspnetroles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("ClaimType")
                        .HasColumnName("claimtype");

                    b.Property<string>("ClaimValue")
                        .HasColumnName("claimvalue");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnName("roleid");

                    b.HasKey("Id")
                        .HasName("pk_aspnetroleclaims");

                    b.HasIndex("RoleId")
                        .HasName("ix_aspnetroleclaims_roleid");

                    b.ToTable("aspnetroleclaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("ClaimType")
                        .HasColumnName("claimtype");

                    b.Property<string>("ClaimValue")
                        .HasColumnName("claimvalue");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnName("userid");

                    b.HasKey("Id")
                        .HasName("pk_aspnetuserclaims");

                    b.HasIndex("UserId")
                        .HasName("ix_aspnetuserclaims_userid");

                    b.ToTable("aspnetuserclaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnName("loginprovider");

                    b.Property<string>("ProviderKey")
                        .HasColumnName("providerkey");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnName("providerdisplayname");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnName("userid");

                    b.HasKey("LoginProvider", "ProviderKey")
                        .HasName("pk_aspnetuserlogins");

                    b.HasIndex("UserId")
                        .HasName("ix_aspnetuserlogins_userid");

                    b.ToTable("aspnetuserlogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnName("userid");

                    b.Property<string>("RoleId")
                        .HasColumnName("roleid");

                    b.HasKey("UserId", "RoleId")
                        .HasName("pk_aspnetuserroles");

                    b.HasIndex("RoleId")
                        .HasName("ix_aspnetuserroles_roleid");

                    b.ToTable("aspnetuserroles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnName("userid");

                    b.Property<string>("LoginProvider")
                        .HasColumnName("loginprovider");

                    b.Property<string>("Name")
                        .HasColumnName("name");

                    b.Property<string>("Value")
                        .HasColumnName("value");

                    b.HasKey("UserId", "LoginProvider", "Name")
                        .HasName("pk_aspnetusertokens");

                    b.ToTable("aspnetusertokens");
                });

            modelBuilder.Entity("SSC.CustomSolution.CubansConexion.TuneUpResell.WebApplication.Data.Persistence.Entities.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<float>("Balance")
                        .HasColumnName("balance");

                    b.Property<bool>("Enabled")
                        .HasColumnName("enabled");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name");

                    b.Property<string>("RepresentativeId")
                        .HasColumnName("representativeid");

                    b.HasKey("Id")
                        .HasName("pk_accounts");

                    b.HasIndex("RepresentativeId")
                        .HasName("ix_accounts_representativeid");

                    b.ToTable("accounts");
                });

            modelBuilder.Entity("SSC.CustomSolution.CubansConexion.TuneUpResell.WebApplication.Data.Persistence.Entities.CellularBalanceTuneUpProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<float>("Amount")
                        .HasColumnName("amount");

                    b.Property<bool>("Enabled")
                        .HasColumnName("enabled");

                    b.Property<string>("Label")
                        .HasColumnName("label");

                    b.Property<bool>("Primary")
                        .HasColumnName("primary");

                    b.HasKey("Id")
                        .HasName("pk_cellularbalancetuneupprofiles");

                    b.ToTable("cellularbalancetuneupprofiles");
                });

            modelBuilder.Entity("SSC.CustomSolution.CubansConexion.TuneUpResell.WebApplication.Data.Persistence.Entities.CellularBalanceTuneUpRecord", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("AgentId")
                        .HasColumnName("agentid");

                    b.Property<float>("Amount")
                        .HasColumnName("amount");

                    b.Property<DateTime>("Created")
                        .HasColumnName("created");

                    b.Property<string>("PhoneNumberTarget")
                        .IsRequired()
                        .HasColumnName("phonenumbertarget");

                    b.HasKey("Id")
                        .HasName("pk_cellularbalancetuneuprecords");

                    b.HasIndex("AgentId")
                        .HasName("ix_cellularbalancetuneuprecords_agentid");

                    b.ToTable("cellularbalancetuneuprecords");
                });

            modelBuilder.Entity("SSC.CustomSolution.CubansConexion.TuneUpResell.WebApplication.Data.Persistence.Entities.CellularBalanceTuneUpRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("AgentId")
                        .HasColumnName("agentid");

                    b.Property<string>("PhoneNumberTarget")
                        .IsRequired()
                        .HasColumnName("phonenumbertarget");

                    b.Property<DateTime>("Requested")
                        .HasColumnName("requested");

                    b.Property<int?>("TuneUpProfileId")
                        .HasColumnName("tuneupprofileid");

                    b.HasKey("Id")
                        .HasName("pk_cellularbalancetuneuprequests");

                    b.HasIndex("AgentId")
                        .HasName("ix_cellularbalancetuneuprequests_agentid");

                    b.HasIndex("TuneUpProfileId")
                        .HasName("ix_cellularbalancetuneuprequests_tuneupprofileid");

                    b.ToTable("cellularbalancetuneuprequests");
                });

            modelBuilder.Entity("SSC.CustomSolution.CubansConexion.TuneUpResell.WebApplication.Data.Persistence.Entities.NautaBalanceTuneUpProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<float>("Amount")
                        .HasColumnName("amount");

                    b.Property<bool>("Enabled")
                        .HasColumnName("enabled");

                    b.Property<string>("Label")
                        .HasColumnName("label");

                    b.Property<bool>("Primary")
                        .HasColumnName("primary");

                    b.HasKey("Id")
                        .HasName("pk_nautabalancetuneupprofiles");

                    b.ToTable("nautabalancetuneupprofiles");
                });

            modelBuilder.Entity("SSC.CustomSolution.CubansConexion.TuneUpResell.WebApplication.Data.Persistence.Entities.NautaBalanceTuneUpRecord", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("AgentId")
                        .HasColumnName("agentid");

                    b.Property<float>("Amount")
                        .HasColumnName("amount");

                    b.Property<DateTime>("Created")
                        .HasColumnName("created");

                    b.Property<string>("EmailAddressTarget")
                        .IsRequired()
                        .HasColumnName("emailaddresstarget");

                    b.HasKey("Id")
                        .HasName("pk_nautabalancetuneuprecords");

                    b.HasIndex("AgentId")
                        .HasName("ix_nautabalancetuneuprecords_agentid");

                    b.ToTable("nautabalancetuneuprecords");
                });

            modelBuilder.Entity("SSC.CustomSolution.CubansConexion.TuneUpResell.WebApplication.Data.Persistence.Entities.NautaBalanceTuneUpRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("AgentId")
                        .HasColumnName("agentid");

                    b.Property<string>("EmailAddressTarget")
                        .IsRequired()
                        .HasColumnName("emailaddresstarget");

                    b.Property<DateTime>("Requested")
                        .HasColumnName("requested");

                    b.Property<int?>("TuneUpProfileId")
                        .HasColumnName("tuneupprofileid");

                    b.HasKey("Id")
                        .HasName("pk_nautabalancetuneuprequests");

                    b.HasIndex("AgentId")
                        .HasName("ix_nautabalancetuneuprequests_agentid");

                    b.HasIndex("TuneUpProfileId")
                        .HasName("ix_nautabalancetuneuprequests_tuneupprofileid");

                    b.ToTable("nautabalancetuneuprequests");
                });

            modelBuilder.Entity("SSC.CustomSolution.CubansConexion.TuneUpResell.WebApplication.Data.Persistence.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnName("accessfailedcount");

                    b.Property<Guid?>("AccountId")
                        .HasColumnName("accountid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnName("concurrencystamp");

                    b.Property<string>("Email")
                        .HasColumnName("email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnName("emailconfirmed");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnName("fullname");

                    b.Property<string>("IdRole")
                        .HasColumnName("idrole");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnName("lockoutenabled");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnName("lockoutend");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnName("normalizedemail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnName("normalizedusername")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnName("passwordhash");

                    b.Property<string>("PhoneNumber")
                        .HasColumnName("phonenumber");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnName("phonenumberconfirmed");

                    b.Property<string>("SecurityStamp")
                        .HasColumnName("securitystamp");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnName("twofactorenabled");

                    b.Property<string>("UserName")
                        .HasColumnName("username")
                        .HasMaxLength(256);

                    b.HasKey("Id")
                        .HasName("pk_aspnetusers");

                    b.HasIndex("AccountId")
                        .HasName("ix_aspnetusers_accountid");

                    b.HasIndex("NormalizedEmail")
                        .HasName("emailindex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("usernameindex");

                    b.ToTable("aspnetusers");
                });

            modelBuilder.Entity("SmartSolucionesCuba.SAPRESSC.Core.Persistence.Entities.Trace", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("AfterData")
                        .HasColumnName("afterdata");

                    b.Property<string>("Author")
                        .HasColumnName("author");

                    b.Property<string>("BeforeData")
                        .IsRequired()
                        .HasColumnName("beforedata");

                    b.Property<string>("EntityName")
                        .IsRequired()
                        .HasColumnName("entityname");

                    b.Property<long>("NextId")
                        .HasColumnName("nextid");

                    b.Property<DateTime>("Registered")
                        .HasColumnName("registered");

                    b.Property<string>("Signature")
                        .HasColumnName("signature");

                    b.Property<int>("Type")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_traces");

                    b.ToTable("traces");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .HasConstraintName("fk_aspnetroleclaims_aspnetroles_roleid")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("SSC.CustomSolution.CubansConexion.TuneUpResell.WebApplication.Data.Persistence.Entities.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_aspnetuserclaims_aspnetusers_userid")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("SSC.CustomSolution.CubansConexion.TuneUpResell.WebApplication.Data.Persistence.Entities.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_aspnetuserlogins_aspnetusers_userid")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .HasConstraintName("fk_aspnetuserroles_aspnetroles_roleid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SSC.CustomSolution.CubansConexion.TuneUpResell.WebApplication.Data.Persistence.Entities.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_aspnetuserroles_aspnetusers_userid")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("SSC.CustomSolution.CubansConexion.TuneUpResell.WebApplication.Data.Persistence.Entities.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_aspnetusertokens_aspnetusers_userid")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SSC.CustomSolution.CubansConexion.TuneUpResell.WebApplication.Data.Persistence.Entities.Account", b =>
                {
                    b.HasOne("SSC.CustomSolution.CubansConexion.TuneUpResell.WebApplication.Data.Persistence.Entities.User", "Representative")
                        .WithMany()
                        .HasForeignKey("RepresentativeId")
                        .HasConstraintName("fk_accounts_aspnetusers_representativeid");
                });

            modelBuilder.Entity("SSC.CustomSolution.CubansConexion.TuneUpResell.WebApplication.Data.Persistence.Entities.CellularBalanceTuneUpRecord", b =>
                {
                    b.HasOne("SSC.CustomSolution.CubansConexion.TuneUpResell.WebApplication.Data.Persistence.Entities.User", "Agent")
                        .WithMany()
                        .HasForeignKey("AgentId")
                        .HasConstraintName("fk_cellularbalancetuneuprecords_aspnetusers_agentid");
                });

            modelBuilder.Entity("SSC.CustomSolution.CubansConexion.TuneUpResell.WebApplication.Data.Persistence.Entities.CellularBalanceTuneUpRequest", b =>
                {
                    b.HasOne("SSC.CustomSolution.CubansConexion.TuneUpResell.WebApplication.Data.Persistence.Entities.User", "Agent")
                        .WithMany()
                        .HasForeignKey("AgentId")
                        .HasConstraintName("fk_cellularbalancetuneuprequests_aspnetusers_agentid");

                    b.HasOne("SSC.CustomSolution.CubansConexion.TuneUpResell.WebApplication.Data.Persistence.Entities.CellularBalanceTuneUpProfile", "TuneUpProfile")
                        .WithMany()
                        .HasForeignKey("TuneUpProfileId")
                        .HasConstraintName("fk_cellularbalancetuneuprequests_cellularbalancetuneupprofiles_~");
                });

            modelBuilder.Entity("SSC.CustomSolution.CubansConexion.TuneUpResell.WebApplication.Data.Persistence.Entities.NautaBalanceTuneUpRecord", b =>
                {
                    b.HasOne("SSC.CustomSolution.CubansConexion.TuneUpResell.WebApplication.Data.Persistence.Entities.User", "Agent")
                        .WithMany()
                        .HasForeignKey("AgentId")
                        .HasConstraintName("fk_nautabalancetuneuprecords_aspnetusers_agentid");
                });

            modelBuilder.Entity("SSC.CustomSolution.CubansConexion.TuneUpResell.WebApplication.Data.Persistence.Entities.NautaBalanceTuneUpRequest", b =>
                {
                    b.HasOne("SSC.CustomSolution.CubansConexion.TuneUpResell.WebApplication.Data.Persistence.Entities.User", "Agent")
                        .WithMany()
                        .HasForeignKey("AgentId")
                        .HasConstraintName("fk_nautabalancetuneuprequests_aspnetusers_agentid");

                    b.HasOne("SSC.CustomSolution.CubansConexion.TuneUpResell.WebApplication.Data.Persistence.Entities.NautaBalanceTuneUpProfile", "TuneUpProfile")
                        .WithMany()
                        .HasForeignKey("TuneUpProfileId")
                        .HasConstraintName("fk_nautabalancetuneuprequests_nautabalancetuneupprofiles_tuneup~");
                });

            modelBuilder.Entity("SSC.CustomSolution.CubansConexion.TuneUpResell.WebApplication.Data.Persistence.Entities.User", b =>
                {
                    b.HasOne("SSC.CustomSolution.CubansConexion.TuneUpResell.WebApplication.Data.Persistence.Entities.Account", "Account")
                        .WithMany("Members")
                        .HasForeignKey("AccountId")
                        .HasConstraintName("fk_aspnetusers_accounts_accountid");
                });
#pragma warning restore 612, 618
        }
    }
}
